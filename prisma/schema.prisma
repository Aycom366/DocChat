// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  files         File[]
  messages      Message[] //each user will also have its own messages

  // The @map attribute is used to define the name of the column in the database table that corresponds to a field in your Prisma schema.
  stipeCustomerId        String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end") //when the current subscription will end

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // In Prisma, the @@id attribute is used to define a composite primary key for a model. A composite primary key is a key that uses multiple columns in a table to form a primary key.

  //@@id([provider, providerAccountId]) means that the combination of provider and providerAccountId is unique for each record in your table, and it's used as the primary key.

  // This means you can't have two records with the same provider and providerAccountId. This is useful when you want to ensure that each combination of certain fields is unique.
  @@id([provider, providerAccountId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  messages Message[] //Each files will have its own messages

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean //differentiate if user or Ai message

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  File   File?   @relation(fields: [fileId], references: [id])
  fileId String?
}
