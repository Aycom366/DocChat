// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  files         File[]
  messages      Message[] //each user will also have its own messages

  // The @map attribute is used to define the name of the column in the database table that corresponds to a field in your Prisma schema.
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end") //when the current subscription will end

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Session      Session[]
  OauthAccount OauthAccount[]
}

enum UploadStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model OauthAccount {
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  //The unique below acts like a primary key
  @@unique([providerId, providerUserId])
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  messages Message[] //Each files will have its own messages

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean //differentiate if user or Ai message

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  File   File?   @relation(fields: [fileId], references: [id])
  fileId String?
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}
